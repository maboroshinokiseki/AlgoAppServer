// <auto-generated />
using System;
using AlgoApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlgoApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("AlgoApp.Data.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "第一章",
                            Order = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "第二章",
                            Order = 1
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "赵老师的班级",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "钱老师的班级",
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FillingAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Analysis = "无",
                            ChapterId = 1,
                            Content = "采用邻接表存储的图的广度优先遍历算法类似于二叉树的（）。",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Analysis = "判断链表有没有环，可以用快慢指针来实现，两指针的移动速度不一样。如果相遇，则表示有环，否则表示无环。",
                            ChapterId = 1,
                            Content = "如果使用比较高效的算法判断单链表有没有环的算法中，至少需要几个指针？",
                            Difficulty = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Analysis = "有向图是n，无向图是n-1。",
                            ChapterId = 2,
                            Content = "要连通具有n个顶点的有向图,至少需要（）条边？",
                            Difficulty = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Analysis = "本题考点是有向图中顶点度的概念。有向图的某个顶点v，把以v为终点的边的数目，称为v的入度；以v为始点的边的数目，称为v的出度；v的度则定义为该顶点的入度和出度之和。因此，本题参考答案是C。",
                            ChapterId = 2,
                            Content = "有向图的一个顶点的度为该顶点的（）。",
                            Difficulty = 3,
                            Type = 0
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.Property<string>("Output")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResultTests");
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SelectionOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "先序遍历",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "中序遍历",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "后序遍历",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "按层遍历",
                            Correct = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "不需要",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "1个",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "2个",
                            Correct = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "3个",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "n-1",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "n",
                            Correct = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "n+1",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "2n",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "入度",
                            Correct = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            Content = "出度",
                            Correct = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            Content = "入度与出度之和",
                            Correct = true,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "(入度＋出度)/2",
                            Correct = false,
                            QuestionId = 4
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsToClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassRoomId = 1,
                            StudentId = 4
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Password = "root",
                            Points = 0,
                            Role = 0,
                            Username = "root"
                        },
                        new
                        {
                            Id = 2,
                            BirthDay = new DateTime(2000, 4, 3, 13, 36, 0, 280, DateTimeKind.Local).AddTicks(5069),
                            Gender = 1,
                            NickName = "赵老师",
                            Password = "123",
                            Points = 0,
                            Role = 1,
                            Username = "teacherzhao"
                        },
                        new
                        {
                            Id = 3,
                            BirthDay = new DateTime(2000, 4, 3, 13, 36, 0, 281, DateTimeKind.Local).AddTicks(4353),
                            Gender = 2,
                            NickName = "钱老师",
                            Password = "123",
                            Points = 0,
                            Role = 1,
                            Username = "teacherqian"
                        },
                        new
                        {
                            Id = 4,
                            BirthDay = new DateTime(2000, 4, 3, 13, 36, 0, 281, DateTimeKind.Local).AddTicks(4406),
                            Gender = 1,
                            NickName = "孙同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "studentsun"
                        },
                        new
                        {
                            Id = 5,
                            BirthDay = new DateTime(2000, 4, 3, 13, 36, 0, 281, DateTimeKind.Local).AddTicks(4429),
                            Gender = 2,
                            NickName = "李同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "studentli"
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MyAnswers")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("FillingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.HasOne("AlgoApp.Data.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("ResultTests")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("SelectionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.HasOne("AlgoApp.Data.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using AlgoApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlgoApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("AlgoApp.Data.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("AlgoApp.Data.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "绪论",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "线性表",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "栈和队列",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "串",
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "数组和广义表",
                            Order = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "树和二叉树",
                            Order = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "图",
                            Order = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "动态存储管理",
                            Order = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "查找",
                            Order = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "内部排序",
                            Order = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "外部排序",
                            Order = 11
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "赵老师的班级_计科",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "赵老师的班级_电信",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "钱老师的班级",
                            TeacherId = 3
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.DailyPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 4,
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 8,
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 16,
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 32,
                            UserId = 9
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 64,
                            UserId = 10
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 128,
                            UserId = 11
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 256,
                            UserId = 12
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2020, 4, 13, 0, 0, 0, 0, DateTimeKind.Local),
                            Points = 512,
                            UserId = 13
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.DailyPractice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyPractices");
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FillingAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Read")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Analysis = "无",
                            ChapterId = 1,
                            Content = "算法的时间复杂度是指（）。",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Analysis = "无",
                            ChapterId = 1,
                            Content = "算法的空间复杂度是指（）。",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Analysis = "无",
                            ChapterId = 1,
                            Content = "以下哪个不是算法的重要特性（）。",
                            Difficulty = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.Property<string>("Output")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResultTests");
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SelectionOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "开发算法所花费的时间",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "学习算法所需要的时间",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "程序执行所需时间",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "以上都不对",
                            Correct = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "算法代码的大小",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "算法所能处理数据的大小",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "程序执行所需内存大小",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "以上都不对",
                            Correct = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "有穷性",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "确定性",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "可行性",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "易用性",
                            Correct = true,
                            QuestionId = 3
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsToClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassRoomId = 1,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 2,
                            ClassRoomId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 3,
                            ClassRoomId = 1,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 4,
                            ClassRoomId = 1,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 5,
                            ClassRoomId = 1,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 6,
                            ClassRoomId = 1,
                            StudentId = 9
                        },
                        new
                        {
                            Id = 7,
                            ClassRoomId = 1,
                            StudentId = 10
                        },
                        new
                        {
                            Id = 8,
                            ClassRoomId = 1,
                            StudentId = 11
                        },
                        new
                        {
                            Id = 9,
                            ClassRoomId = 1,
                            StudentId = 12
                        },
                        new
                        {
                            Id = 10,
                            ClassRoomId = 1,
                            StudentId = 13
                        },
                        new
                        {
                            Id = 11,
                            ClassRoomId = 2,
                            StudentId = 14
                        },
                        new
                        {
                            Id = 12,
                            ClassRoomId = 2,
                            StudentId = 15
                        },
                        new
                        {
                            Id = 13,
                            ClassRoomId = 2,
                            StudentId = 16
                        },
                        new
                        {
                            Id = 14,
                            ClassRoomId = 2,
                            StudentId = 17
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Password = "root",
                            Points = 0,
                            Role = 0,
                            Username = "root"
                        },
                        new
                        {
                            Id = 2,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(156),
                            Gender = 1,
                            Nickname = "赵老师",
                            Password = "123",
                            Points = 0,
                            Role = 1,
                            Username = "teacherzhao"
                        },
                        new
                        {
                            Id = 3,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9112),
                            Gender = 2,
                            Nickname = "钱老师",
                            Password = "123",
                            Points = 0,
                            Role = 1,
                            Username = "teacherqian"
                        },
                        new
                        {
                            Id = 4,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9141),
                            Gender = 1,
                            Nickname = "孙同学",
                            Password = "123",
                            Points = 2,
                            Role = 2,
                            Username = "studentsun"
                        },
                        new
                        {
                            Id = 5,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9625),
                            Gender = 2,
                            Nickname = "李同学",
                            Password = "123",
                            Points = 4,
                            Role = 2,
                            Username = "studentli"
                        },
                        new
                        {
                            Id = 6,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9653),
                            Gender = 2,
                            Nickname = "周同学",
                            Password = "123",
                            Points = 8,
                            Role = 2,
                            Username = "student06"
                        },
                        new
                        {
                            Id = 7,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9656),
                            Gender = 2,
                            Nickname = "吴同学",
                            Password = "123",
                            Points = 16,
                            Role = 2,
                            Username = "student07"
                        },
                        new
                        {
                            Id = 8,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9659),
                            Gender = 2,
                            Nickname = "郑同学",
                            Password = "123",
                            Points = 32,
                            Role = 2,
                            Username = "student08"
                        },
                        new
                        {
                            Id = 9,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9661),
                            Gender = 2,
                            Nickname = "王同学",
                            Password = "123",
                            Points = 64,
                            Role = 2,
                            Username = "student09"
                        },
                        new
                        {
                            Id = 10,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9664),
                            Gender = 2,
                            Nickname = "冯同学",
                            Password = "123",
                            Points = 128,
                            Role = 2,
                            Username = "student10"
                        },
                        new
                        {
                            Id = 11,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9667),
                            Gender = 2,
                            Nickname = "陈同学",
                            Password = "123",
                            Points = 256,
                            Role = 2,
                            Username = "student11"
                        },
                        new
                        {
                            Id = 12,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9670),
                            Gender = 2,
                            Nickname = "褚同学",
                            Password = "123",
                            Points = 512,
                            Role = 2,
                            Username = "student12"
                        },
                        new
                        {
                            Id = 13,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9672),
                            Gender = 2,
                            Nickname = "卫同学",
                            Password = "123",
                            Points = 1024,
                            Role = 2,
                            Username = "student13"
                        },
                        new
                        {
                            Id = 14,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9675),
                            Gender = 2,
                            Nickname = "蒋同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "student10"
                        },
                        new
                        {
                            Id = 15,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9677),
                            Gender = 2,
                            Nickname = "沈同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "student11"
                        },
                        new
                        {
                            Id = 16,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9680),
                            Gender = 2,
                            Nickname = "韩同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "student12"
                        },
                        new
                        {
                            Id = 17,
                            BirthDay = new DateTime(2000, 4, 14, 0, 28, 58, 596, DateTimeKind.Local).AddTicks(9682),
                            Gender = 2,
                            Nickname = "杨同学",
                            Password = "123",
                            Points = 0,
                            Role = 2,
                            Username = "student13"
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MyAnswers")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.Bookmark", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.DailyPoints", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.DailyPractice", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("FillingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.Message", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.HasOne("AlgoApp.Data.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("ResultTests")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("SelectionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.HasOne("AlgoApp.Data.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

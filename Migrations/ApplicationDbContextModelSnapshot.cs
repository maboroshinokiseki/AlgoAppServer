// <auto-generated />
using System;
using AlgoApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlgoApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("AlgoApp.Data.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Chapters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "第一章",
                            Order = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "第二章",
                            Order = 1
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "t的Class",
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FillingAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Analysis = "無",
                            ChapterId = 1,
                            Content = "選擇正確答案",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Analysis = "無",
                            ChapterId = 1,
                            Content = "選擇正確答案",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Analysis = "無",
                            ChapterId = 2,
                            Content = "選擇正確答案",
                            Difficulty = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Analysis = "無",
                            ChapterId = 2,
                            Content = "選擇正確答案",
                            Difficulty = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.Property<string>("Output")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResultTests");
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SelectionOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "正確",
                            Correct = true,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "正確",
                            Correct = true,
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "正確",
                            Correct = true,
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            Content = "錯誤",
                            Correct = false,
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "正確",
                            Correct = true,
                            QuestionId = 4
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsToClasses");
                });

            modelBuilder.Entity("AlgoApp.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "root",
                            Role = 0,
                            Username = "root"
                        },
                        new
                        {
                            Id = 2,
                            NickName = "老師",
                            Password = "t",
                            Role = 1,
                            Username = "t"
                        },
                        new
                        {
                            Id = 3,
                            NickName = "學生",
                            Password = "s",
                            Role = 2,
                            Username = "s"
                        });
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MyAnswers")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("AlgoApp.Data.ClassRoom", b =>
                {
                    b.HasOne("AlgoApp.Data.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.FillingAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("FillingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.Question", b =>
                {
                    b.HasOne("AlgoApp.Data.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.ResultTest", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("ResultTests")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.SelectionOption", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany("SelectionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.StudentToClass", b =>
                {
                    b.HasOne("AlgoApp.Data.ClassRoom", "ClassRoom")
                        .WithMany("Students")
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("AlgoApp.Data.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoApp.Data.UserAnswer", b =>
                {
                    b.HasOne("AlgoApp.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoApp.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
